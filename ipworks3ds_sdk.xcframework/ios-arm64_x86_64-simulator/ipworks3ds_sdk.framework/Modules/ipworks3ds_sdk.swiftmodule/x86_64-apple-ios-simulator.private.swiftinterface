// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ipworks3ds_sdk
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AdSupport
import CommonCrypto
import CoreLocation
import Darwin
import Foundation
import MachO
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
@_exported import ipworks3ds_sdk
@_inheritsConvenienceInitializers @objc public class LinkeditCmdNameThreeDSServerAuthResponse : ObjectiveC.NSObject {
  @objc public static func toFileContinueAfterFailure()
  @objc public static func sDKUtilsTestDynamicSymbolTableCmd()
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class Transaction : ObjectiveC.NSObject {
  @objc public func getAuthenticationRequestParameters() throws -> ipworks3ds_sdk.AuthenticationRequestParameters
  @objc public func doChallenge(rootViewController: UIKit.UIViewController, challengeParameters: ipworks3ds_sdk.ChallengeParameters, challengeStatusReceiver: ipworks3ds_sdk.ChallengeStatusReceiver, timeout: Swift.Int) throws
  @objc public func getProgressView() throws -> ipworks3ds_sdk.ProgressView
  @objc public func close() throws
  @objc deinit
}
extension UIKit.UIColor {
  convenience public init?(hexColorValue: Swift.String)
  public func cLLocationManagerCANCEL() -> Swift.String
}
public enum ClientACSRootCertStoreTypes : Swift.Int32 {
  case cstUser
  case cstMachine
  case cstPFXFile
  case cstPFXBlob
  case cstJKSFile
  case cstJKSBlob
  case cstPEMKeyFile
  case cstPEMKeyBlob
  case cstPublicKeyFile
  case cstPublicKeyBlob
  case cstSSHPublicKeyBlob
  case cstP7BFile
  case cstP7BBlob
  case cstSSHPublicKeyFile
  case cstPPKFile
  case cstPPKBlob
  case cstXMLFile
  case cstXMLBlob
  case cstJWKFile
  case cstJWKBlob
  case cstSecurityKey
  case cstBCFKSFile
  case cstBCFKSBlob
  case cstPKCS11
  case cstAuto
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum ClientDeviceParamValueTypes : Swift.Int32 {
  case vtObject
  case vtArray
  case vtString
  case vtNumber
  case vtBool
  case vtNull
  case vtRaw
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum ClientDirectoryServerCertStoreTypes : Swift.Int32 {
  case cstUser
  case cstMachine
  case cstPFXFile
  case cstPFXBlob
  case cstJKSFile
  case cstJKSBlob
  case cstPEMKeyFile
  case cstPEMKeyBlob
  case cstPublicKeyFile
  case cstPublicKeyBlob
  case cstSSHPublicKeyBlob
  case cstP7BFile
  case cstP7BBlob
  case cstSSHPublicKeyFile
  case cstPPKFile
  case cstPPKBlob
  case cstXMLFile
  case cstXMLBlob
  case cstJWKFile
  case cstJWKBlob
  case cstSecurityKey
  case cstBCFKSFile
  case cstBCFKSBlob
  case cstPKCS11
  case cstAuto
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum ClientProxyAuthSchemes : Swift.Int32 {
  case authBasic
  case authDigest
  case authProprietary
  case authNone
  case authNtlm
  case authNegotiate
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum ClientProxySSLs : Swift.Int32 {
  case psAutomatic
  case psAlways
  case psNever
  case psTunnel
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum ClientSSLCertStoreTypes : Swift.Int32 {
  case cstUser
  case cstMachine
  case cstPFXFile
  case cstPFXBlob
  case cstJKSFile
  case cstJKSBlob
  case cstPEMKeyFile
  case cstPEMKeyBlob
  case cstPublicKeyFile
  case cstPublicKeyBlob
  case cstSSHPublicKeyBlob
  case cstP7BFile
  case cstP7BBlob
  case cstSSHPublicKeyFile
  case cstPPKFile
  case cstPPKBlob
  case cstXMLFile
  case cstXMLBlob
  case cstJWKFile
  case cstJWKBlob
  case cstSecurityKey
  case cstBCFKSFile
  case cstBCFKSBlob
  case cstPKCS11
  case cstAuto
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public protocol IPWorks3DSClientDelegateSwift {
  func oobAppURLIsNameEqual(_ dataPacket: Foundation.Data)
  func publicKeyChallengeTextBox(_ dataPacket: Foundation.Data)
  func getTextFontNameDeviceParameterTest(_ errorCode: Swift.Int32, _ description: Swift.String)
  func oOBContinuationIndicatorInfoDict(_ logLevel: Swift.Int32, _ message: Swift.String, _ logType: Swift.String)
  func cancelCReqCornerRadius(_ certEncoded: Foundation.Data, _ certSubject: Swift.String, _ certIssuer: Swift.String, _ status: Swift.String, _ accept: inout Swift.Int32)
  func setCornerRadiusPorts(_ message: Swift.String)
}
public enum IPWorks3DSClientError : Swift.Error {
  case Error(Swift.Int32, Swift.String)
}
@objc @_inheritsConvenienceInitializers public class CertEncodedIsEmpty : ObjectiveC.NSObject, ipworks3ds_sdk.UnameThridInstructionPtr {
  public var navigationControllerShared: ipworks3ds_sdk.MarkTamperedReceiptURL
  @objc override dynamic public init()
  public init(runtimeLicense: Swift.String?, delegate: ipworks3ds_sdk.IPWorks3DSClientDelegateSwift?)
  @objc deinit
  public var getHeadingTextFontSizeConstant: Swift.String {
    get
  }
  public var userInterfaceStyleIdentifierForVendor: Swift.Int32 {
    get
  }
  public var delegate: ipworks3ds_sdk.IPWorks3DSClientDelegateSwift? {
    get
    set
  }
  @objc public func oobAppURLIsNameEqual(_ dataPacket: Foundation.Data!)
  @objc public func publicKeyChallengeTextBox(_ dataPacket: Foundation.Data!)
  @objc public func getTextFontNameDeviceParameterTest(_ errorCode: Swift.Int32, _ description: Swift.String!)
  @objc public func oOBContinuationIndicatorInfoDict(_ logLevel: Swift.Int32, _ message: Swift.String!, _ logType: Swift.String!)
  @objc public func cancelCReqCornerRadius(_ certEncoded: Foundation.Data!, _ certSubject: Swift.String!, _ certIssuer: Swift.String!, _ status: Swift.String!, _ accept: Swift.UnsafeMutablePointer<Swift.Int32>)
  @objc public func setCornerRadiusPorts(_ message: Swift.String!)
  public var checkTamperedNotification: Swift.String {
    get
    set
  }
  public var VtStringHexColorValue: Swift.String {
    get
  }
  public var IsDarkModeEndif: Swift.String {
    get
  }
  public var ScaleAspectFitCategoryType: Swift.String {
    get
  }
  public var DescriptionIsArrayType: Swift.Int32 {
    get
    set
  }
  public func DataDataViewController(aCSRootCertIndex: Swift.Int32) throws -> Swift.String
  public func uIFontDescriptorBringSubviewToFront(aCSRootCertIndex: Swift.Int32, newACSRootCertEncoded: Swift.String) throws
  public func SystemNameDsKey(aCSRootCertIndex: Swift.Int32) throws -> Foundation.Data
  public func sockaddrExpectedBundleID(aCSRootCertIndex: Swift.Int32, newACSRootCertEncoded: Foundation.Data) throws
  public func OpenOOBAppFailedSlice(aCSRootCertIndex: Swift.Int32) throws -> Swift.String
  public func textCmdIsHidden(aCSRootCertIndex: Swift.Int32, newACSRootCertStore: Swift.String) throws
  public func OnLogModificationDate(aCSRootCertIndex: Swift.Int32) throws -> Foundation.Data
  public func customizationServerAddress(aCSRootCertIndex: Swift.Int32, newACSRootCertStore: Foundation.Data) throws
  public func AlwaysClientConfig(aCSRootCertIndex: Swift.Int32) throws -> Swift.String
  public func isBoldSelector(aCSRootCertIndex: Swift.Int32, newACSRootCertStorePassword: Swift.String) throws
  public func UsingFontDateFormatter(aCSRootCertIndex: Swift.Int32) throws -> ipworks3ds_sdk.ClientACSRootCertStoreTypes
  public func protocolKernelHandle(aCSRootCertIndex: Swift.Int32, newACSRootCertStoreType: ipworks3ds_sdk.ClientACSRootCertStoreTypes) throws
  public func RESENDRemoveFromSuperview(aCSRootCertIndex: Swift.Int32) throws -> Swift.String
  public func radiusStrtoul(aCSRootCertIndex: Swift.Int32, newACSRootCertSubject: Swift.String) throws
  public var FileManagerSysctl: Swift.Int32 {
    get
  }
  public var systemNameTransStatus: Swift.String {
    get
  }
  public var linkeditCmdIsRuntimeCodeTampered: Swift.String {
    get
  }
  public var protocolServerAddress: Swift.String {
    get
    set
  }
  public var repeatingLayoutSubviews: Swift.Bool {
    get
  }
  public var bundleIsNameEqual: Swift.String {
    get
    set
  }
  public var topAnchorFireLog: Swift.String {
    get
    set
  }
  public var sectionIconPadding: Swift.Bool {
    get
  }
  public var forKeyWithUnsafeBytes: Swift.Int32 {
    get
  }
  public var passwordDEBUGGING: Swift.Int32 {
    get
  }
  public var addrFamilyCloseView: Swift.String {
    get
  }
  public var challengeUILinkedCmdName: Swift.Int32 {
    get
  }
  public var oOBAppURLCurrentLocation: Swift.Bool {
    get
  }
  public var getChallengeTimeRemainingSetACSRootCertStoreType: Swift.Bool {
    get
  }
  public var configIgnoreErroOpaquePointer: Swift.Bool {
    get
  }
  public var setButtonTextCertIssuer: Swift.Int32 {
    get
  }
  public var asyncPhone: Swift.Int32 {
    get
  }
  public var sendChallengeRequestMaxTextLen: Swift.String {
    get
  }
  public var translatesAutoresizingMaskIntoConstraintsRepeating: Swift.Int32 {
    get
  }
  public var appendingPathComponentCGSize: Swift.Bool {
    get
  }
  public var getHeaderTextAuthorizationStatus: Swift.Bool {
    get
  }
  public var frameCoordinate: Swift.String {
    get
  }
  public var btFontNameQueue: Swift.String {
    get
  }
  public var getLocationClearClientComponent: Swift.String {
    get
  }
  public var directoryServerInfoListDsKey: Swift.Int32 {
    get
  }
  public func linkeditDataDesiredButtonSize(challengeSelectInfoIndex: Swift.Int32) throws -> Swift.String
  public func opaquePointerSymoff(challengeSelectInfoIndex: Swift.Int32) throws -> Swift.String
  public var threeDSRequestorAppURLIsInstalledFromAppStore: Swift.String {
    get
  }
  public var namedDsIcon: Swift.Bool {
    get
    set
  }
  public var adrpOpImageName: Swift.String {
    get
  }
  public var sdkTransactionIDSyscallType: Swift.Int32 {
    get
    set
  }
  public func sdkEphemeralPublicKeyDividingBy(deviceParamIndex: Swift.Int32) throws -> Swift.Int32
  public func getUserInterfaceIdiomDeadline(deviceParamIndex: Swift.Int32, newDeviceParamCategory: Swift.Int32) throws
  public func invalidateIntrinsicContentSizeTraitCollection(deviceParamIndex: Swift.Int32) throws -> Swift.String
  public func getChallengeListenerGetLocation(deviceParamIndex: Swift.Int32, newDeviceParamFieldName: Swift.String) throws
  public func fireSecurityEventGetChallengeStatusReceiver(deviceParamIndex: Swift.Int32) throws -> Swift.String
  public func caseInsensitiveCompareSwift(deviceParamIndex: Swift.Int32, newDeviceParamValue: Swift.String) throws
  public func deviceParamCountCertArray(deviceParamIndex: Swift.Int32) throws -> ipworks3ds_sdk.ClientDeviceParamValueTypes
  public func encodingIsHidden(deviceParamIndex: Swift.Int32, newDeviceParamValueType: ipworks3ds_sdk.ClientDeviceParamValueTypes) throws
  public var setDeviceParamCategoryCoreLocation: Swift.String {
    get
    set
  }
  public var setLabelCustomizationPublicKey: Foundation.Data {
    get
    set
  }
  public var sharedLabelSize: Swift.String {
    get
    set
  }
  public var navItemRandomArrary: Foundation.Data {
    get
    set
  }
  public var boolValueModelIdentifier: Swift.String {
    get
    set
  }
  public var stubHelperSectionNameOpaquePointer: ipworks3ds_sdk.ClientDirectoryServerCertStoreTypes {
    get
    set
  }
  public var setAcsRefNumberAssumingMemoryBound: Swift.String {
    get
    set
  }
  public var deviceParamsCollectorStrVal: Swift.String {
    get
    set
  }
  public var loadDSCertsGetnameinfo: Swift.String {
    get
    set
  }
  public var adjustsFontSizeToFitWidthFamilyNames: Swift.Bool {
    get
  }
  public var getSeverityAddDeviceParams: Swift.String {
    get
  }
  public var versionBottom: Swift.String {
    get
  }
  public var opaquePointerSecurityEventListener: Swift.String {
    get
  }
  public var wHITELISTDEBUGGING: Swift.Int32 {
    get
    set
  }
  public func sDKAppIdFireLog(extensionIndex: Swift.Int32) throws -> Swift.Bool
  public func invalidInputExceptionForkRetCode(extensionIndex: Swift.Int32, newExtensionCritical: Swift.Bool) throws
  public func systemBackgroundNewDeviceParamValue(extensionIndex: Swift.Int32) throws -> Swift.String
  public func segDataChallengeEntryBoxTwoAutofillType(extensionIndex: Swift.Int32, newExtensionData: Swift.String) throws
  public func uINavigationBarInfoPath(extensionIndex: Swift.Int32) throws -> Swift.String
  public func oobAppURLFontAttributes(extensionIndex: Swift.Int32, newExtensionId: Swift.String) throws
  public func standardTranslateInstruction(extensionIndex: Swift.Int32) throws -> Swift.String
  public func sectionPointerAlpha(extensionIndex: Swift.Int32, newExtensionName: Swift.String) throws
  public var setTextBoxTwoCustomizationResponse: Swift.String {
    get
  }
  public var stringGetIPAddress: Swift.String {
    get
  }
  public var messageTypeLinkedBase: Swift.String {
    get
  }
  public var newDeviceParamValueTypeGetButtonText: Swift.String {
    get
    set
  }
  public var RawValueImageHeader: Swift.String {
    get
  }
  public var OobAppURLTraits: Swift.Int32 {
    get
    set
  }
  public var ImageHeaderSecurityEventListener: Swift.String {
    get
  }
  public var RemoveObjectGetDirectoryServerCA: Swift.Int32 {
    get
    set
  }
  public var GetDirectoryServerKeyIdTitleTextAttributes: Swift.Int32 {
    get
    set
  }
  public var HeadingTextAlignmentFileAttributeKey: Swift.String {
    get
  }
  public var headingTextFontSizeFindTextSectionInMatchO: Swift.String {
    get
  }
  public var isHiddenUuidString: Swift.String {
    get
  }
  public var hasFishhookedSymbolSuccess: Swift.String {
    get
  }
  public var deviceParameterBlacklistTextFontSize: ipworks3ds_sdk.ClientProxyAuthSchemes {
    get
    set
  }
  public var newACSRootCertStoreTypeScaleAspectFit: Swift.Bool {
    get
    set
  }
  public var inoutImport: Swift.String {
    get
    set
  }
  public var setBorderWidthDynamicSymbolTableCmd: Swift.Int32 {
    get
    set
  }
  public var sDKRuntimeExceptionAlert: Swift.String {
    get
    set
  }
  public var tAMPEREDBuild: ipworks3ds_sdk.ClientProxySSLs {
    get
    set
  }
  public var getMethodDyldPathInset: Swift.String {
    get
    set
  }
  public var serverAddressGetBorderColor: Swift.String {
    get
    set
  }
  public var isEqualGetBackgroundColor: Swift.String {
    get
  }
  public var DateFormatUINavigationItem: Swift.String {
    get
    set
  }
  public var IsRuntimeCodeTamperedCompatibleWith: Swift.String {
    get
    set
  }
  public var NewMethodCodeOffsetEvent: Swift.String {
    get
    set
  }
  public var IsOSSupportedChallengeSelectInfoName: Foundation.Data {
    get
    set
  }
  public var ShowUIHostname: Swift.String {
    get
    set
  }
  public var IsArrayTypeIconTag: Foundation.Data {
    get
    set
  }
  public var SetupNavigationBarGetThreeDSRequestorAppURL: Swift.String {
    get
    set
  }
  public var SetHidesBackButtonAtomically: Foundation.Data {
    get
    set
  }
  public var OverlayDirectoryServerCertStore: Swift.String {
    get
    set
  }
  public var ChallengeSelectInfoIndexCheckTamperedByInfoPlistDate: ipworks3ds_sdk.ClientSSLCertStoreTypes {
    get
    set
  }
  public var PreferredLanguagesRange: Swift.String {
    get
    set
  }
  public var AuthRequestParamDarkImg: Swift.String {
    get
  }
  public var ChallengeParametersLabel: Foundation.Data {
    get
  }
  public var fallthroughIsMainThread: Swift.String {
    get
  }
  public var setHeightResult: Swift.Int32 {
    get
    set
  }
  public var uiIdiomSymbolName: Swift.Int32 {
    get
  }
  public var tearDownWithErrorGetUIType: Swift.String {
    get
  }
  public var storedSdkAppIdTimeoutInterval: Swift.Bool {
    get
    set
  }
  public var systemFontCloseView: Swift.Bool {
    get
    set
  }
  public var sdkVersionKeyGetID: Swift.Bool {
    get
    set
  }
  public var resendInformationLabelConstraint: Swift.String {
    get
  }
  public var linkeditCmdNameOnError: Swift.String {
    get
  }
  public var checkSvcIntegritySetID: Swift.String {
    get
  }
  public func appendLogResponse(_ field: Swift.String, _ value: Swift.String, _ valueType: Swift.Int32, _ category: Swift.Int32) throws
  public func cancelCReqRight(_ id: Swift.String, _ name: Swift.String, _ critical: Swift.Bool, _ data: Swift.String) throws
  public func setDeviceParamValueStrtoul(_ name: Swift.String, _ value: Swift.String, _ valueType: Swift.Int32) throws
  public func stringIsEmptySDKUtilsTest(_ authResponse: Swift.String) throws
  public func getChallengeStatusReceiverWithAlphaComponent(_ configurationString: Swift.String) throws -> Swift.String
  public func addTargetHandle() throws -> Swift.String
  public func setAcsRefNumberAppChallenge() throws
  public func setTextBoxCustomizationStroff() throws
  public func bottomAnchorMinimumScaleFactor() throws
  public func adrpOpSecurityEventListener() throws
}
@objc public enum ButtonType : Swift.Int {
  case SUBMIT
  case CONTINUE
  case NEXT
  case CANCEL
  case RESEND
  case ADDITIONAL
  case OOB_OPEN_APP
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LabelType : Swift.Int {
  case INFO_HEADER
  case INFO_TEXT
  case INFO_LABEL
  case WHITELIST
  case DEVICE_BINDING
  case WHY_INFO
  case WHY_INFO_TEXT
  case EXPANDABLE_INFO
  case EXPANDABLE_INFO_TEXT
  case SELECTION_LIST
  case DATA_ENTRY_LABEL
  case DATA_ENTRY_LABEL_2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum Severity : Swift.Int {
  case LOW
  case MEDIUM
  case HIGH
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SecurityEvent : Swift.Int {
  case ROOT
  case TAMPERED
  case INSTALLED_FROM_UNTRUSTED_STORE
  case HOOK
  case EMULATOR
  case DEBUGGING
  case DEBUG_ENABLED
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol ChallengeStatusReceiver {
  @objc func completed(_ completionEvent: ipworks3ds_sdk.CompletionEvent)
  @objc func cancelled()
  @objc func timedout()
  @objc func protocolError(_ protocolErrorEvent: ipworks3ds_sdk.ProtocolErrorEvent)
  @objc func runtimeError(_ runtimeErrorEvent: ipworks3ds_sdk.RuntimeErrorEvent)
}
@objc public protocol ClientEventListener {
  @objc func onDataPacketIn(_ dataPacket: Foundation.Data)
  @objc func onDataPacketOut(_ dataPacket: Foundation.Data)
  @objc func onError(_ errorCode: Swift.Int32, _ description: Swift.String)
  @objc func onLog(_ logLevel: Swift.Int32, _ message: Swift.String, _ logType: Swift.String)
  @objc func onSSLServerAuthentication(_ certEncoded: Foundation.Data, _ certSubject: Swift.String, _ certIssuer: Swift.String, _ status: Swift.String, _ accept: Swift.UnsafeMutablePointer<Swift.Int32>)
  @objc func onSSLStatus(_ message: Swift.String)
}
@objc public protocol SecurityEventListener {
  @objc func alarm(_ severity: ipworks3ds_sdk.Severity, _ event: ipworks3ds_sdk.SecurityEvent)
}
@_inheritsConvenienceInitializers @objc public class ProgressView : ObjectiveC.NSObject {
  @objc public func show()
  @objc public func close()
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class AuthenticationRequestParameters : ObjectiveC.NSObject {
  @objc public func getDeviceData() -> Swift.String
  @objc public func getSDKTransactionID() -> Swift.String
  @objc public func getSDKAppID() -> Swift.String
  @objc public func getSDKReferenceNumber() -> Swift.String
  @objc public func getSDKEphemeralPublicKey() -> Swift.String
  @objc public func getMessageVersion() -> Swift.String
  @objc public func getAuthRequest() -> Swift.String
  @objc deinit
}
@objc public class ChallengeParameters : ObjectiveC.NSObject {
  @objc public init(threeDSServerAuthResponse: Swift.String)
  @objc public init(threeDSServerTransactionID: Swift.String, acsTransactionID: Swift.String, acsRefNumber: Swift.String, acsSignedContent: Swift.String, threeDSRequestorAppURL: Swift.String)
  @objc public func set3DSServerTransactionID(_ transactionID: Swift.String)
  @objc public func setAcsTransactionID(_ transactionID: Swift.String)
  @objc public func setAcsRefNumber(_ refNumber: Swift.String)
  @objc public func setAcsSignedContent(_ signedContent: Swift.String)
  @objc public func get3DSServerTransactionID() -> Swift.String
  @objc public func getAcsTransactionID() -> Swift.String
  @objc public func getAcsRefNumber() -> Swift.String
  @objc public func getAcsSignedContent() -> Swift.String
  @objc public func getThreeDSRequestorAppURL() -> Swift.String
  @objc public func setThreeDSRequestorAppURL(_ threeDSRequestorAppURL: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ConfigParameters : ObjectiveC.NSObject {
  @objc public func addParam(group: Swift.String?, paramName: Swift.String, paramValue: Swift.String?) throws
  @objc public func getParamValue(group: Swift.String?, paramName: Swift.String) throws -> Swift.String
  @objc public func removeParam(group: Swift.String?, paramName: Swift.String) throws -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public class DirectoryServerInfo : ObjectiveC.NSObject {
  @objc convenience public init(RID: Swift.String, publicKey: Swift.String, CA: Swift.String)
  @objc public init(RID: Swift.String, KID: Swift.String, publicKey: Swift.String, CA: Swift.String)
  @objc convenience public init(RID: Swift.String, publicKey: Swift.String, CAs: [Swift.String])
  @objc public init(RID: Swift.String, KID: Swift.String, publicKey: Swift.String, CAs: [Swift.String])
  @objc deinit
}
@objc public class ConfigParametersBuilder : ObjectiveC.NSObject {
  public static let GROUP_DIRECTORY_SERVER_KEY: Swift.String
  public static let GROUP_DIRECTORY_SERVER_KEY_ID: Swift.String
  public static let GROUP_DIRECTORY_SERVER_CA: Swift.String
  public static let GROUP_DEVICE_PARAMETER_BLACK_LIST: Swift.String
  public static let GROUP_CLIENT_CONFIG: Swift.String
  public static let RUNTIME_LICENSE: Swift.String
  public static let APP_PROVISIONING_PROFILE_HASH: Swift.String
  public static let APP_EXECUTABLE_HASH: Swift.String
  public static let APP_BUNDLE_ID: Swift.String
  public static let OOB_APP_URL_SUPPORTED: Swift.String
  @objc convenience public init(directoryServerInfoList: [ipworks3ds_sdk.DirectoryServerInfo]?, runtimeLicense: Swift.String, deviceParameterBlacklist: [Swift.String]?, clientConfig: [Swift.String]?, appBundleID: Swift.String)
  @objc public init(directoryServerInfoList: [ipworks3ds_sdk.DirectoryServerInfo]?, runtimeLicense: Swift.String, deviceParameterBlacklist: [Swift.String]?, clientConfig: [Swift.String]?, appBundleID: Swift.String, OOBAppURLSupported: Swift.Bool = false)
  @objc public func build() throws -> ipworks3ds_sdk.ConfigParameters
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class Customization : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public func setTextFontName(fontName: Swift.String?) throws
  @objc public func setTextColor(hexColorCode: Swift.String?) throws
  @objc public func setTextColor(color: UIKit.UIColor?)
  @objc public func setTextFontSize(fontSize: Swift.Int) throws
  @objc public func getTextFontName() -> Swift.String?
  @objc public func getTextColor() -> UIKit.UIColor?
  @objc public func getTextColorHex() -> Swift.String?
  @objc public func getTextFontSize() -> Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class ButtonCustomization : ipworks3ds_sdk.Customization {
  @objc override dynamic public init()
  @objc public func setBackgroundColor(color: UIKit.UIColor?)
  @objc public func setCornerRadius(cornerRadius: Swift.Int) throws
  @objc public func setHeight(height: CoreFoundation.CGFloat) throws
  @objc public func getBackgroundColor() -> UIKit.UIColor?
  @objc public func getCornerRadius() -> Swift.Int
  @objc public func getHeight() -> CoreFoundation.CGFloat
  @objc public func setPadding(edge: UIKit.UIEdgeInsets)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class ToolbarCustomization : ipworks3ds_sdk.Customization {
  @objc override dynamic public init()
  @objc public func setBackgroundColor(color: UIKit.UIColor?)
  @objc public func setHeaderText(headerText: Swift.String?) throws
  @objc public func setButtonText(buttonText: Swift.String?) throws
  @objc public func getBackgroundColor() -> UIKit.UIColor?
  @objc public func getHeaderText() -> Swift.String?
  @objc public func getButtonText() -> Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class LabelCustomization : ipworks3ds_sdk.Customization {
  @objc override dynamic public init()
  @objc public func setHeadingTextColor(color: UIKit.UIColor?)
  @objc public func setHeadingTextFontName(fontName: Swift.String?) throws
  @objc public func setHeadingTextFontSize(fontSize: Swift.Int) throws
  @objc public func setHeadingTextAlignment(textAlignment: UIKit.NSTextAlignment) throws
  @objc public func setPadding(forLabelType: ipworks3ds_sdk.LabelType, edge: UIKit.UIEdgeInsets) throws
  @objc public func setBackgroundColor(forLabelType: ipworks3ds_sdk.LabelType, color: UIKit.UIColor) throws
  @objc public func setTextColor(forLabelType: ipworks3ds_sdk.LabelType, color: UIKit.UIColor) throws
  @objc public func setTextFontName(forLabelType: ipworks3ds_sdk.LabelType, fontName: Swift.String) throws
  @objc public func setTextFontSize(forLabelType: ipworks3ds_sdk.LabelType, fontSize: CoreFoundation.CGFloat) throws
  @objc public func getHeadingTextColor() -> UIKit.UIColor?
  @objc public func getHeadingTextFontName() -> Swift.String?
  @objc public func getHeadingTextFontSize() -> Swift.Int
  @objc public func getHeadingTextAlignment() -> UIKit.NSTextAlignment
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class TextBoxCustomization : ipworks3ds_sdk.Customization {
  @objc override dynamic public init()
  @objc public func setCornerRadius(cornerRadius: Swift.Int) throws
  @objc public func getCornerRadius() -> Swift.Int
  @objc public func setBorderWidth(borderWidth: Swift.Int) throws
  @objc public func setBorderColor(color: UIKit.UIColor?)
  @objc public func getBorderWidth() -> Swift.Int
  @objc public func getBorderColor() -> UIKit.UIColor?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class UiCustomization : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public func setButtonCustomization(buttonCustomization: ipworks3ds_sdk.ButtonCustomization, buttonType: ipworks3ds_sdk.ButtonType) throws
  @objc public func setToolbarCustomization(toolbarCustomization: ipworks3ds_sdk.ToolbarCustomization) throws
  @objc public func setLabelCustomization(labelCustomization: ipworks3ds_sdk.LabelCustomization) throws
  @objc public func setTextBoxCustomization(textBoxCustomization: ipworks3ds_sdk.TextBoxCustomization) throws
  @objc public func setTextBoxTwoCustomization(textBoxCustomization: ipworks3ds_sdk.TextBoxCustomization) throws
  @objc public func getButtonCustomization(buttonType: ipworks3ds_sdk.ButtonType) -> ipworks3ds_sdk.ButtonCustomization
  @objc public func getToolbarCustomization() -> ipworks3ds_sdk.ToolbarCustomization
  @objc public func getLabelCustomization() -> ipworks3ds_sdk.LabelCustomization
  @objc public func getTextBoxCustomization() -> ipworks3ds_sdk.TextBoxCustomization
  @objc public func getTextBoxTwoCustomization() -> ipworks3ds_sdk.TextBoxCustomization
  @objc public func setBackground(color: UIKit.UIColor?)
  @objc public func setInformationZoneIconPosition(_ position: Swift.Int)
  @objc public func setBrandingZoneLogoGap(_ value: CoreFoundation.CGFloat)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class Warning : ObjectiveC.NSObject {
  @objc public func getID() -> Swift.String
  @objc public func getMessage() -> Swift.String
  @objc public func getSeverity() -> ipworks3ds_sdk.Severity
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class RuntimeErrorEvent : ObjectiveC.NSObject {
  @objc public func getErrorCode() -> Swift.String?
  @objc public func getErrorMessage() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class ErrorMessage : ObjectiveC.NSObject {
  @objc public func getTransactionID() -> Swift.String
  @objc public func getErrorCode() -> Swift.String
  @objc public func getErrorDescription() -> Swift.String
  @objc public func getErrorDetails() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class ProtocolErrorEvent : ObjectiveC.NSObject {
  @objc public func getErrorMessage() -> ipworks3ds_sdk.ErrorMessage
  @objc public func getSDKTransactionID() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class CompletionEvent : ObjectiveC.NSObject {
  @objc public func getSDKTransactionID() -> Swift.String
  @objc public func getTransactionStatus() -> Swift.String
  @objc deinit
}
public enum IPWorks3DSSDKError : Swift.Error {
  case SDKAlreadInitializedException
  case SDKNotInitializedException(_: Swift.String)
  case SDKRuntimeException(_: Swift.String)
  case InvalidInputException(_: Swift.String)
}
extension ipworks3ds_sdk.IPWorks3DSSDKError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var attributedStringPrint: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class ThreeDS2Service : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public init(bundle: Foundation.Bundle)
  @objc public func initialize(configParameters: ipworks3ds_sdk.ConfigParameters?, locale: Swift.String?, uiCustomization: ipworks3ds_sdk.UiCustomization?, clientEventListener: ipworks3ds_sdk.ClientEventListener?, securityEventListener: ipworks3ds_sdk.SecurityEventListener?) throws
  @objc public func createTransaction(_ directoryServerID: Swift.String, _ messageVersion: Swift.String?) throws -> ipworks3ds_sdk.Transaction
  @objc public func cleanup() throws
  @objc public func getSDKVersion() throws -> Swift.String
  @objc public func getWarnings() throws -> Swift.Array<ipworks3ds_sdk.Warning>
  @objc deinit
}
extension ipworks3ds_sdk.ClientACSRootCertStoreTypes : Swift.Equatable {}
extension ipworks3ds_sdk.ClientACSRootCertStoreTypes : Swift.Hashable {}
extension ipworks3ds_sdk.ClientACSRootCertStoreTypes : Swift.RawRepresentable {}
extension ipworks3ds_sdk.ClientDeviceParamValueTypes : Swift.Equatable {}
extension ipworks3ds_sdk.ClientDeviceParamValueTypes : Swift.Hashable {}
extension ipworks3ds_sdk.ClientDeviceParamValueTypes : Swift.RawRepresentable {}
extension ipworks3ds_sdk.ClientDirectoryServerCertStoreTypes : Swift.Equatable {}
extension ipworks3ds_sdk.ClientDirectoryServerCertStoreTypes : Swift.Hashable {}
extension ipworks3ds_sdk.ClientDirectoryServerCertStoreTypes : Swift.RawRepresentable {}
extension ipworks3ds_sdk.ClientProxyAuthSchemes : Swift.Equatable {}
extension ipworks3ds_sdk.ClientProxyAuthSchemes : Swift.Hashable {}
extension ipworks3ds_sdk.ClientProxyAuthSchemes : Swift.RawRepresentable {}
extension ipworks3ds_sdk.ClientProxySSLs : Swift.Equatable {}
extension ipworks3ds_sdk.ClientProxySSLs : Swift.Hashable {}
extension ipworks3ds_sdk.ClientProxySSLs : Swift.RawRepresentable {}
extension ipworks3ds_sdk.ClientSSLCertStoreTypes : Swift.Equatable {}
extension ipworks3ds_sdk.ClientSSLCertStoreTypes : Swift.Hashable {}
extension ipworks3ds_sdk.ClientSSLCertStoreTypes : Swift.RawRepresentable {}
extension ipworks3ds_sdk.ButtonType : Swift.Equatable {}
extension ipworks3ds_sdk.ButtonType : Swift.Hashable {}
extension ipworks3ds_sdk.ButtonType : Swift.RawRepresentable {}
extension ipworks3ds_sdk.LabelType : Swift.Equatable {}
extension ipworks3ds_sdk.LabelType : Swift.Hashable {}
extension ipworks3ds_sdk.LabelType : Swift.RawRepresentable {}
extension ipworks3ds_sdk.Severity : Swift.Equatable {}
extension ipworks3ds_sdk.Severity : Swift.Hashable {}
extension ipworks3ds_sdk.Severity : Swift.RawRepresentable {}
extension ipworks3ds_sdk.SecurityEvent : Swift.Equatable {}
extension ipworks3ds_sdk.SecurityEvent : Swift.Hashable {}
extension ipworks3ds_sdk.SecurityEvent : Swift.RawRepresentable {}
